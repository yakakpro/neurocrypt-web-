<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <title>üì° –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∏–π –ê—Ä—Ö—ñ–≤–∞—Ç–æ—Ä</title>
  <style>
    body {
      background: #0c0c0c;
      color: #e0e0e0;
      font-family: 'Segoe UI', Arial, sans-serif;
      padding: 50px 30px;
      max-width: 800px;
      margin: auto;
      text-align: center;
      position: relative;
      overflow: hidden;
    }
    #matrix {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0.1;
      z-index: -1;
    }
    h1 {
      font-size: 2em;
      margin-bottom: 30px;
      animation: glitch 3s infinite;
    }
    canvas {
      display: block;
      margin: 20px auto;
      border: 1px solid #555;
      background: #000;
      animation: pulse 6s infinite;
    }
    button, select {
      background: #1a1a1a;
      color: #eee;
      padding: 15px;
      border: 1px solid #444;
      margin: 15px;
      cursor: pointer;
      font-size: 1em;
      width: 80%;
      animation: glitch 5s infinite;
    }
    button:hover, select:hover {
      background: #333;
      transform: scale(1.05);
    }
    #archivator {
      text-align: center;
      margin-top: 20px;
      font-size: 1.2em;
      animation: glitch 5s infinite;
    }
    pre {
      background: #111;
      padding: 10px;
      overflow-x: auto;
      margin-top: 20px;
    }
    footer {
      margin-top: 60px;
      font-size: 0.8em;
      color: #555;
      animation: glitch 5s infinite;
    }
    .event {
      margin: 20px 0;
      padding: 10px;
      border: 1px dashed #444;
    }
    @keyframes glitch {
      0% { transform: translate(0); opacity: 1; }
      2% { transform: translate(1px, 1px); opacity: 0.95; }
      4% { transform: translate(-1px, -1px); opacity: 0.95; }
      6% { transform: translate(0); opacity: 1; }
      100% { transform: translate(0); opacity: 1; }
    }
    @keyframes pulse {
      0% { filter: brightness(1); }
      50% { filter: brightness(1.5); }
      100% { filter: brightness(1); }
    }
  </style>
</head>
<body>
  <canvas id="matrix"></canvas>
  <h1>üì° –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∏–π –ê—Ä—Ö—ñ–≤–∞—Ç–æ—Ä</h1>
  <p>–ó–±–µ—Ä–∏ –≤—ñ—á–Ω–∏–π –ª–∞–Ω—Ü—é–≥ —Å–≤–æ—ó—Ö –¥—ñ–π —É –≥–∞–ª–∞–∫—Ç–∏—Ü—ñ —Ä–µ–∑–æ–Ω–∞–Ω—Å—É!</p>

  <select id="event-filter" onchange="filterEvents()">
    <option value="all">–£—Å—ñ –ø–æ–¥—ñ—ó</option>
    <option value="glyph">–ì–ª—ñ—Ñ–∏</option>
    <option value="post">–ü–æ—Å—Ç–∏</option>
    <option value="message">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</option>
    <option value="item">–û–±–º—ñ–Ω–∏</option>
  </select>
  <button onclick="loadEvents()">üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–∞–Ω—Ü—é–≥ –ø–æ–¥—ñ–π</button>
  <canvas id="archivator-viz" width="400" height="400"></canvas>
  <div id="archivator"></div>
  <pre id="archivator-data" style="display:none;"></pre>
  <button id="saveArchivator" onclick="saveArchivator()" style="display:none;">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ª–∞–Ω—Ü—é–≥</button>
  <button id="savePng" onclick="savePng()" style="display:none;">üñºÔ∏è –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ PNG</button>

  <footer>created with üí† by –¢–∏ & –†–µ–∑–æ–Ω–∞–Ω—Å</footer>

  <script src="https://cdn.jsdelivr.net/npm/kyber-js@0.2.0/dist/kyber.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.168.0/build/three.min.js"></script>
  <script>
    // Matrix rain
    const matrixCanvas = document.getElementById("matrix");
    const ctx = matrixCanvas.getContext("2d");
    matrixCanvas.height = window.innerHeight;
    matrixCanvas.width = window.innerWidth;
    const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZüåÄ";
    const fontSize = 10;
    const columns = matrixCanvas.width / fontSize;
    const drops = Array(Math.floor(columns)).fill(1);
    function drawMatrix() {
      ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
      ctx.fillRect(0, 0, matrixCanvas.width, matrixCanvas.height);
      ctx.fillStyle = "#0ff";
      ctx.font = `${fontSize}px monospace`;
      drops.forEach((y, i) => {
        const text = chars.charAt(Math.floor(Math.random() * chars.length));
        const x = i * fontSize;
        ctx.fillText(text, x, y * fontSize);
        if (y * fontSize > matrixCanvas.height && Math.random() > 0.975) drops[i] = 0;
        drops[i]++;
      });
    }
    setInterval(drawMatrix, 50);

    // Archivator visualization
    const archivatorCanvas = document.getElementById("archivator-viz");
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, archivatorCanvas.width / archivatorCanvas.height, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas: archivatorCanvas });
    renderer.setSize(archivatorCanvas.width, archivatorCanvas.height);
    camera.position.z = 50;
    let events = [];
    let rotation = 0;

    function drawArchivator() {
      scene.children.forEach(child => scene.remove(child));
      events.forEach((event, i) => {
        const geometry = new THREE.SphereGeometry(1, 32, 32);
        const material = new THREE.MeshBasicMaterial({
          color: event.resonance >= 60 ? 0x00ffff : 0xff00ff,
          transparent: true,
          opacity: 0.8
        });
        const sphere = new THREE.Mesh(geometry, material);
        const angle = (i / events.length) * 2 * Math.PI;
        const radius = 20 + (event.resonance || 0) / 5;
        sphere.position.set(
          radius * Math.cos(angle + rotation),
          radius * Math.sin(angle + rotation),
          Math.sin(i) * 10
        );
        scene.add(sphere);
        if (i > 0) {
          const prevAngle = ((i - 1) / events.length) * 2 * Math.PI;
          const prevX = radius * Math.cos(prevAngle + rotation);
          const prevY = radius * Math.sin(prevAngle + rotation);
          const lineGeometry = new THREE.BufferGeometry().setFromPoints([
            new THREE.Vector3(prevX, prevY, Math.sin(i - 1) * 10),
            sphere.position
          ]);
          const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ffff, opacity: 0.5, transparent: true });
          const line = new THREE.Line(lineGeometry, lineMaterial);
          scene.add(line);
        }
      });
      rotation += 0.01;
      renderer.render(scene, camera);
    }
    setInterval(drawArchivator, 16);

    async function verifySignature(data, signature) {
      const encoder = new TextEncoder();
      const computed = btoa(String.fromCharCode(...encoder.encode(data))).slice(0, 32);
      return computed === signature;
    }

    async function signData(data) {
      const encoder = new TextEncoder();
      const hash = btoa(String.fromCharCode(...encoder.encode(data)));
      return hash.slice(0, 32);
    }

    async function loadEvents() {
      try {
        events = [];
        let totalResonance = 0;
        let eventCount = 0;

        const sources = [
          { key: "resoglyph", type: "glyph" },
          { key: "resonanceCommunity", type: "post" },
          { key: "resonanceChat", type: "message" },
          { key: "resonanceMarket", type: "item" },
          { key: "resonanceArchive", type: "archive" }
        ];

        for (const source of sources) {
          const data = localStorage.getItem(source.key);
          if (data) {
            const parsed = JSON.parse(data);
            if (Array.isArray(parsed)) {
              parsed.forEach(item => {
                if (item.encrypted && item.signature && verifySignature(item.encrypted, item.signature)) {
                  const eventData = JSON.parse(atob(item.encrypted));
                  events.push({
                    type: source.type,
                    data: eventData,
                    resonance: eventData.resonance || eventData.matchPercent || 100,
                    timestamp: eventData.timestamp || new Date().toISOString()
                  });
                  eventCount++;
                  totalResonance += eventData.resonance || eventData.matchPercent || 100;
                }
              });
            } else if (parsed.encrypted && parsed.signature && (await verifySignature(parsed.encrypted, parsed.signature))) {
              const eventData = JSON.parse(atob(parsed.encrypted));
              if (source.type === "archive") {
                eventData.forEach(entry => {
                  events.push({
                    type: entry.type,
                    data: entry.data,
                    resonance: entry.data.resonance || entry.data.matchPercent || 100,
                    timestamp: entry.timestamp
                  });
                  eventCount++;
                  totalResonance += entry.data.resonance || entry.data.matchPercent || 100;
                });
              } else {
                events.push({
                  type: source.type,
                  data: eventData,
                  resonance: eventData.resonance || eventData.matchPercent || 100,
                  timestamp: eventData.timestamp || new Date().toISOString()
                });
                eventCount++;
                totalResonance += eventData.resonance || eventData.matchPercent || 100;
              }
            }
          }
        }

        events.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        const averageResonance = eventCount ? (totalResonance / eventCount).toFixed(1) : 0;

        const kyber = new Kyber.Kyber512();
        const { publicKey, secretKey } = await kyber.keygen();
        const encrypted = await kyber.encrypt(publicKey, JSON.stringify(events));
        const encryptedStr = btoa(String.fromCharCode(...encrypted));
        const signature = await signData(encryptedStr);
        const archivatorData = { encrypted: encryptedStr, signature, publicKey: btoa(String.fromCharCode(...publicKey)) };
        localStorage.setItem("resonanceArchivator", JSON.stringify(archivatorData));

        displayEvents(events);
        document.getElementById("archivator-data").textContent = JSON.stringify(archivatorData, null, 2);
        document.getElementById("archivator-data").style.display = "block";
        document.getElementById("saveArchivator").style.display = "inline-block";
        document.getElementById("savePng").style.display = "inline-block";
      } catch (e) {
        alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞ –ø–æ–¥—ñ–π: " + e.message);
      }
    }

    function filterEvents() {
      const filter = document.getElementById("event-filter").value;
      const filteredEvents = filter === "all" ? events : events.filter(event => event.type === filter);
      displayEvents(filteredEvents);
    }

    function displayEvents(displayEvents) {
      let output = `üì° –ü–æ–¥—ñ–π —É –ª–∞–Ω—Ü—é–≥—É: ${displayEvents.length}<br>`;
      displayEvents.forEach((event, i) => {
        output += `<div class="event">`;
        if (event.type === "glyph") {
          output += `üß¨ –ì–ª—ñ—Ñ ${i + 1}: ${event.data.glyph?.join(" + ") || "–Ω–µ–≤—ñ–¥–æ–º–æ"}<br>`;
          output += `üîó –†–µ–∑–æ–Ω–∞–Ω—Å: ${event.resonance.toFixed(1)}%<br>`;
        } else if (event.type === "post") {
          output += `üìù –ü–æ—Å—Ç ${i + 1}: ${event.data.title || "–±–µ–∑ –Ω–∞–∑–≤–∏"}<br>`;
          output += `üß¨ –ì–ª—ñ—Ñ: ${event.data.glyph?.join(" + ") || "–Ω–µ–≤—ñ–¥–æ–º–æ"}<br>`;
          output += `üîó –†–µ–∑–æ–Ω–∞–Ω—Å: ${event.resonance.toFixed(1)}%<br>`;
        } else if (event.type === "message") {
          output += `üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${i + 1}: ${event.data.text || "–±–µ–∑ —Ç–µ–∫—Å—Ç—É"}<br>`;
          if (event.data.glyph?.length) {
            output += `üß¨ –ì–ª—ñ—Ñ: ${event.data.glyph.join(" + ")}<br>`;
          }
          output += `üîó –†–µ–∑–æ–Ω–∞–Ω—Å: ${event.resonance.toFixed(1)}%<br>`;
        } else if (event.type === "item") {
          output += `üõí –ê—Ä—Ç–µ—Ñ–∞–∫—Ç ${i + 1}: ${event.data.glyph?.join(" + ") || "–Ω–µ–≤—ñ–¥–æ–º–æ"}<br>`;
          output += `üíé –ë–∞–ª–∏: ${event.data.points || 1}<br>`;
          output += `üîó –†–µ–∑–æ–Ω–∞–Ω—Å: ${event.resonance.toFixed(1)}%<br>`;
        } else if (event.type === "identity") {
          output += `üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ${i + 1}: ${event.data.matchPercent}% –∑–±—ñ–≥—É<br>`;
          output += `üß¨ –ì–ª—ñ—Ñ: ${event.data.enteredGlyph?.join(" + ") || "–Ω–µ–≤—ñ–¥–æ–º–æ"}<br>`;
        }
        output += `üïí ${event.timestamp}<br>`;
        output += `üîí –ü—ñ–¥–ø–∏—Å: ${event.signature?.slice(0, 8) || "–Ω–µ–≤—ñ–¥–æ–º–æ"}...`;
        output += `</div>`;
      });
      document.getElementById("archivator").innerHTML = output;
      drawArchivator();
    }

    function saveArchivator() {
      if (!blobCache) {
        blobCache = new Blob([JSON.stringify(events, null, 2)], {type: "application/json"});
      }
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blobCache);
      a.download = "resonance-archivator.json";
      a.click();
    }

    function savePng() {
      const a = document.createElement("a");
      a.href = archivatorCanvas.toDataURL("image/png");
      a.download = "resonance-archivator.png";
      a.click();
    }

    let blobCache = null;
  </script>
</body>
</html>
